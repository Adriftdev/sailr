   Compiling sailr v1.7.0 (/Users/adrift/projects/sailr)
warning: unused imports: `LOGGER` and `errors::KubeError`
 --> src/deployment/k8sm8/logs.rs:1:13
  |
1 | use crate::{errors::KubeError, LOGGER};
  |             ^^^^^^^^^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

error[E0277]: `{async block@src/deployment/k8sm8/processing.rs:16:35: 16:45}` cannot be unpinned
   --> src/deployment/k8sm8/logs.rs:61:48
    |
61  |     let mut merged_stream = stream::select_all(streams);
    |                             ------------------ ^^^^^^^ unsatisfied trait bound
    |                             |
    |                             required by a bound introduced by this call
    |
    = note: the full trait has been written to '/Users/adrift/projects/sailr/target/debug/deps/sailr-6d0a94448025aec6.long-type-339343415978569774.txt'
    = help: within `__Origin<'_, Lines<impl AsyncBufRead>, ..., ...>`, the trait `Unpin` is not implemented for `{async block@src/deployment/k8sm8/processing.rs:16:35: 16:45}`
    = note: consider using the `pin!` macro
            consider using `Box::pin` if you need to access the pinned value outside of the current scope
note: required because it appears within the type `std::option::Option<{async block@src/deployment/k8sm8/processing.rs:16:35: 16:45}>`
   --> /Users/adrift/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `__Origin<'_, Lines<impl AsyncBufRead>, ..., ...>`
   --> /Users/adrift/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/stream/stream/filter_map.rs:12:1
    |
12  | / pin_project! {
13  | |     /// Stream for the [`filter_map`](super::StreamExt::filter_map) method.
14  | |     #[must_use = "streams do nothing unless polled"]
15  | |     pub struct FilterMap<St, Fut, F> {
...   |
22  | | }
    | |_^
    = note: required for `FilterMap<Lines<impl AsyncBufRead>, ..., ...>` to implement `Unpin`
note: required because it appears within the type `__Origin<'_, FilterMap<Lines<impl AsyncBufRead>, ..., ...>, ...>`
   --> /Users/adrift/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/stream/stream/map.rs:12:1
    |
12  | / pin_project! {
13  | |     /// Stream for the [`map`](super::StreamExt::map) method.
14  | |     #[must_use = "streams do nothing unless polled"]
15  | |     pub struct Map<St, F> {
...   |
20  | | }
    | |_^
    = note: required for `Map<FilterMap<Lines<impl AsyncBufRead>, ..., ...>, ...>` to implement `Unpin`
note: required because it appears within the type `impl Stream<Item = (std::string::String, std::string::String)>`
   --> src/deployment/k8sm8/processing.rs:11:60
    |
11  | pub fn log_tagger<S>(lines_stream: S, pod_name: String) -> impl Stream<Item = TaggedLog>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `futures::stream::select_all`
   --> /Users/adrift/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/stream/select_all.rs:133:23
    |
130 | pub fn select_all<I>(streams: I) -> SelectAll<I::Item>
    |        ---------- required by a bound in this function
...
133 |     I::Item: Stream + Unpin,
    |                       ^^^^^ required by this bound in `select_all`
    = note: the full name for the type has been written to '/Users/adrift/projects/sailr/target/debug/deps/sailr-6d0a94448025aec6.long-type-339343415978569774.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `$crate::__pin_project_make_unpin_impl` which comes from the expansion of the macro `pin_project` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: the method `next` exists for struct `SelectAll<impl Stream<Item = (String, String)>>`, but its trait bounds were not satisfied
  --> src/deployment/k8sm8/logs.rs:65:58
   |
65 |     while let Some((pod_name, log_line)) = merged_stream.next().await {
   |                                                          ^^^^ method cannot be called on `SelectAll<impl Stream<Item = (String, String)>>` due to unsatisfied trait bounds
   |
  ::: /Users/adrift/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/stream/select_all.rs:27:1
   |
27 | pub struct SelectAll<St> {
   | ------------------------ doesn't satisfy `_: StreamExt` or `_: Stream`
   |
   = note: the following trait bounds were not satisfied:
           `futures::stream::SelectAll<impl Stream<Item = (std::string::String, std::string::String)>>: Stream`
           which is required by `futures::stream::SelectAll<impl Stream<Item = (std::string::String, std::string::String)>>: StreamExt`

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/deployment/k8sm8/logs.rs:65:21
   |
65 |     while let Some((pod_name, log_line)) = merged_stream.next().await {
   |                     ^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/deployment/k8sm8/logs.rs:65:65
   |
65 |     while let Some((pod_name, log_line)) = merged_stream.next().await {
   |                                                                 ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/deployment/k8sm8/logs.rs:65:31
   |
65 |     while let Some((pod_name, log_line)) = merged_stream.next().await {
   |                               ^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/deployment/k8sm8/logs.rs:65:15
    |
65  |     while let Some((pod_name, log_line)) = merged_stream.next().await {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: within `(str, str)`, the trait `Sized` is not implemented for `str`
    = note: required because it appears within the type `(str, str)`
note: required by a bound in `std::prelude::v1::Some`
   --> /Users/adrift/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:572:17
    |
572 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::Some`
...
580 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ---- required by a bound in this tuple variant

Some errors have detailed explanations: E0277, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `sailr` (lib) generated 1 warning
error: could not compile `sailr` (lib) due to 6 previous errors; 1 warning emitted
